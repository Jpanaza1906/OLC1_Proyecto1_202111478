
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\005\000\002\003\004\000\002\003\003\000" +
    "\002\004\011\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\005\006\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\003\000\002\006\007\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\004\017\005\001\002\000\004\002\167\001" +
    "\002\000\010\004\013\021\011\031\007\001\002\000\012" +
    "\004\013\020\ufff9\021\011\031\007\001\002\000\006\005" +
    "\037\012\040\001\002\000\004\020\036\001\002\000\004" +
    "\021\034\001\002\000\012\004\013\020\ufffc\021\011\031" +
    "\007\001\002\000\004\012\016\001\002\000\012\004\013" +
    "\020\ufffe\021\011\031\007\001\002\000\004\020\uffff\001" +
    "\002\000\004\031\017\001\002\000\004\005\020\001\002" +
    "\000\004\007\021\001\002\000\020\032\031\033\030\034" +
    "\027\035\026\036\025\037\023\040\022\001\002\000\004" +
    "\010\ufff1\001\002\000\004\010\ufff2\001\002\000\004\010" +
    "\032\001\002\000\004\010\ufff3\001\002\000\004\010\ufff4" +
    "\001\002\000\004\010\ufff5\001\002\000\004\010\ufff6\001" +
    "\002\000\004\010\ufff7\001\002\000\012\004\ufff8\020\ufff8" +
    "\021\ufff8\031\ufff8\001\002\000\004\020\ufffd\001\002\000" +
    "\010\004\013\021\011\031\007\001\002\000\004\020\ufffb" +
    "\001\002\000\004\002\000\001\002\000\004\007\113\001" +
    "\002\000\004\023\041\001\002\000\052\005\043\006\065" +
    "\007\057\011\056\013\052\014\050\015\054\016\053\017" +
    "\064\020\063\021\055\022\061\023\042\024\051\025\044" +
    "\026\062\027\047\030\060\031\066\041\045\001\002\000" +
    "\004\010\uffc6\001\002\000\052\005\043\006\065\007\057" +
    "\011\056\013\052\014\050\015\054\016\053\017\064\020" +
    "\063\021\055\022\061\023\042\024\051\025\044\026\062" +
    "\027\047\030\060\031\066\041\045\001\002\000\052\005" +
    "\043\006\065\007\057\011\056\013\052\014\050\015\054" +
    "\016\053\017\064\020\063\021\055\022\061\023\042\024" +
    "\051\025\044\026\062\027\047\030\060\031\066\041\045" +
    "\001\002\000\052\005\043\006\065\007\057\011\056\013" +
    "\052\014\050\015\054\016\053\017\064\020\063\021\055" +
    "\022\061\023\042\024\051\025\044\026\062\027\047\030" +
    "\060\031\066\041\045\001\002\000\004\010\107\001\002" +
    "\000\052\005\043\006\065\007\057\011\056\013\052\014" +
    "\050\015\054\016\053\017\064\020\063\021\055\022\061" +
    "\023\042\024\051\025\044\026\062\027\047\030\060\031" +
    "\066\041\045\001\002\000\052\005\043\006\065\007\057" +
    "\011\056\013\052\014\050\015\054\016\053\017\064\020" +
    "\063\021\055\022\061\023\042\024\051\025\044\026\062" +
    "\027\047\030\060\031\066\041\045\001\002\000\052\005" +
    "\043\006\065\007\057\011\056\013\052\014\050\015\054" +
    "\016\053\017\064\020\063\021\055\022\061\023\042\024" +
    "\051\025\044\026\062\027\047\030\060\031\066\041\045" +
    "\001\002\000\052\005\043\006\065\007\057\011\056\013" +
    "\052\014\050\015\054\016\053\017\064\020\063\021\055" +
    "\022\061\023\042\024\051\025\044\026\062\027\047\030" +
    "\060\031\066\041\045\001\002\000\052\005\043\006\065" +
    "\007\057\011\056\013\052\014\050\015\054\016\053\017" +
    "\064\020\063\021\055\022\061\023\042\024\051\025\044" +
    "\026\062\027\047\030\060\031\066\041\045\001\002\000" +
    "\052\005\043\006\065\007\057\011\056\013\052\014\050" +
    "\015\054\016\053\017\064\020\063\021\055\022\061\023" +
    "\042\024\051\025\044\026\062\027\047\030\060\031\066" +
    "\041\045\001\002\000\052\005\043\006\065\007\057\011" +
    "\056\013\052\014\050\015\054\016\053\017\064\020\063" +
    "\021\055\022\061\023\042\024\051\025\044\026\062\027" +
    "\047\030\060\031\066\041\045\001\002\000\052\005\043" +
    "\006\065\007\057\011\056\013\052\014\050\015\054\016" +
    "\053\017\064\020\063\021\055\022\061\023\042\024\051" +
    "\025\044\026\062\027\047\030\060\031\066\041\045\001" +
    "\002\000\052\005\043\006\065\007\057\011\056\013\052" +
    "\014\050\015\054\016\053\017\064\020\063\021\055\022" +
    "\061\023\042\024\051\025\044\026\062\027\047\030\060" +
    "\031\066\041\045\001\002\000\052\005\043\006\065\007" +
    "\057\011\056\013\052\014\050\015\054\016\053\017\064" +
    "\020\063\021\055\022\061\023\042\024\051\025\044\026" +
    "\062\027\047\030\060\031\066\041\045\001\002\000\052" +
    "\005\043\006\065\007\057\011\056\013\052\014\050\015" +
    "\054\016\053\017\064\020\063\021\055\022\061\023\042" +
    "\024\051\025\044\026\062\027\047\030\060\031\066\041" +
    "\045\001\002\000\052\005\043\006\065\007\057\011\056" +
    "\013\052\014\050\015\054\016\053\017\064\020\063\021" +
    "\055\022\061\023\042\024\051\025\044\026\062\027\047" +
    "\030\060\031\066\041\045\001\002\000\052\005\043\006" +
    "\065\007\057\011\056\013\052\014\050\015\054\016\053" +
    "\017\064\020\063\021\055\022\061\023\042\024\051\025" +
    "\044\026\062\027\047\030\060\031\066\041\045\001\002" +
    "\000\052\005\043\006\065\007\057\011\056\013\052\014" +
    "\050\015\054\016\053\017\064\020\063\021\055\022\061" +
    "\023\042\024\051\025\044\026\062\027\047\030\060\031" +
    "\066\041\045\001\002\000\052\005\043\006\065\007\057" +
    "\011\056\013\052\014\050\015\054\016\053\017\064\020" +
    "\063\021\055\022\061\023\042\024\051\025\044\026\062" +
    "\027\047\030\060\031\066\041\045\001\002\000\052\005" +
    "\043\006\065\007\057\011\056\013\052\014\050\015\054" +
    "\016\053\017\064\020\063\021\055\022\061\023\042\024" +
    "\051\025\044\026\062\027\047\030\060\031\066\041\045" +
    "\001\002\000\004\010\uffc8\001\002\000\004\010\uffd0\001" +
    "\002\000\004\010\uffd4\001\002\000\004\010\uffd3\001\002" +
    "\000\004\010\uffd7\001\002\000\004\010\uffd2\001\002\000" +
    "\004\010\uffd5\001\002\000\004\010\uffcf\001\002\000\004" +
    "\010\uffce\001\002\000\004\010\uffc9\001\002\000\004\010" +
    "\uffcb\001\002\000\004\010\uffca\001\002\000\004\010\uffcd" +
    "\001\002\000\004\010\uffd9\001\002\000\004\010\uffcc\001" +
    "\002\000\004\010\uffd6\001\002\000\012\004\uffda\020\uffda" +
    "\021\uffda\031\uffda\001\002\000\004\010\uffc7\001\002\000" +
    "\004\010\uffd8\001\002\000\004\010\uffd1\001\002\000\054" +
    "\005\115\006\137\007\131\010\141\011\130\013\124\014" +
    "\122\015\126\016\125\017\136\020\135\021\127\022\133" +
    "\023\114\024\123\025\116\026\134\027\121\030\132\031" +
    "\140\041\117\001\002\000\054\005\115\006\137\007\131" +
    "\010\141\011\130\013\124\014\122\015\126\016\125\017" +
    "\136\020\135\021\127\022\133\023\114\024\123\025\116" +
    "\026\134\027\121\030\132\031\140\041\117\001\002\000" +
    "\054\005\115\006\137\007\131\010\141\011\130\013\124" +
    "\014\122\015\126\016\125\017\136\020\135\021\127\022" +
    "\133\023\114\024\123\025\116\026\134\027\121\030\132" +
    "\031\140\041\117\001\002\000\054\005\115\006\137\007" +
    "\131\010\141\011\130\013\124\014\122\015\126\016\125" +
    "\017\136\020\135\021\127\022\133\023\114\024\123\025" +
    "\116\026\134\027\121\030\132\031\140\041\117\001\002" +
    "\000\054\005\115\006\137\007\131\010\141\011\130\013" +
    "\124\014\122\015\126\016\125\017\136\020\135\021\127" +
    "\022\133\023\114\024\123\025\116\026\134\027\121\030" +
    "\132\031\140\041\117\001\002\000\012\004\ufff0\020\ufff0" +
    "\021\ufff0\031\ufff0\001\002\000\054\005\115\006\137\007" +
    "\131\010\141\011\130\013\124\014\122\015\126\016\125" +
    "\017\136\020\135\021\127\022\133\023\114\024\123\025" +
    "\116\026\134\027\121\030\132\031\140\041\117\001\002" +
    "\000\054\005\115\006\137\007\131\010\141\011\130\013" +
    "\124\014\122\015\126\016\125\017\136\020\135\021\127" +
    "\022\133\023\114\024\123\025\116\026\134\027\121\030" +
    "\132\031\140\041\117\001\002\000\054\005\115\006\137" +
    "\007\131\010\141\011\130\013\124\014\122\015\126\016" +
    "\125\017\136\020\135\021\127\022\133\023\114\024\123" +
    "\025\116\026\134\027\121\030\132\031\140\041\117\001" +
    "\002\000\054\005\115\006\137\007\131\010\141\011\130" +
    "\013\124\014\122\015\126\016\125\017\136\020\135\021" +
    "\127\022\133\023\114\024\123\025\116\026\134\027\121" +
    "\030\132\031\140\041\117\001\002\000\054\005\115\006" +
    "\137\007\131\010\141\011\130\013\124\014\122\015\126" +
    "\016\125\017\136\020\135\021\127\022\133\023\114\024" +
    "\123\025\116\026\134\027\121\030\132\031\140\041\117" +
    "\001\002\000\054\005\115\006\137\007\131\010\141\011" +
    "\130\013\124\014\122\015\126\016\125\017\136\020\135" +
    "\021\127\022\133\023\114\024\123\025\116\026\134\027" +
    "\121\030\132\031\140\041\117\001\002\000\054\005\115" +
    "\006\137\007\131\010\141\011\130\013\124\014\122\015" +
    "\126\016\125\017\136\020\135\021\127\022\133\023\114" +
    "\024\123\025\116\026\134\027\121\030\132\031\140\041" +
    "\117\001\002\000\054\005\115\006\137\007\131\010\141" +
    "\011\130\013\124\014\122\015\126\016\125\017\136\020" +
    "\135\021\127\022\133\023\114\024\123\025\116\026\134" +
    "\027\121\030\132\031\140\041\117\001\002\000\054\005" +
    "\115\006\137\007\131\010\141\011\130\013\124\014\122" +
    "\015\126\016\125\017\136\020\135\021\127\022\133\023" +
    "\114\024\123\025\116\026\134\027\121\030\132\031\140" +
    "\041\117\001\002\000\054\005\115\006\137\007\131\010" +
    "\141\011\130\013\124\014\122\015\126\016\125\017\136" +
    "\020\135\021\127\022\133\023\114\024\123\025\116\026" +
    "\134\027\121\030\132\031\140\041\117\001\002\000\054" +
    "\005\115\006\137\007\131\010\141\011\130\013\124\014" +
    "\122\015\126\016\125\017\136\020\135\021\127\022\133" +
    "\023\114\024\123\025\116\026\134\027\121\030\132\031" +
    "\140\041\117\001\002\000\054\005\115\006\137\007\131" +
    "\010\141\011\130\013\124\014\122\015\126\016\125\017" +
    "\136\020\135\021\127\022\133\023\114\024\123\025\116" +
    "\026\134\027\121\030\132\031\140\041\117\001\002\000" +
    "\054\005\115\006\137\007\131\010\141\011\130\013\124" +
    "\014\122\015\126\016\125\017\136\020\135\021\127\022" +
    "\133\023\114\024\123\025\116\026\134\027\121\030\132" +
    "\031\140\041\117\001\002\000\054\005\115\006\137\007" +
    "\131\010\141\011\130\013\124\014\122\015\126\016\125" +
    "\017\136\020\135\021\127\022\133\023\114\024\123\025" +
    "\116\026\134\027\121\030\132\031\140\041\117\001\002" +
    "\000\054\005\115\006\137\007\131\010\141\011\130\013" +
    "\124\014\122\015\126\016\125\017\136\020\135\021\127" +
    "\022\133\023\114\024\123\025\116\026\134\027\121\030" +
    "\132\031\140\041\117\001\002\000\054\005\115\006\137" +
    "\007\131\010\141\011\130\013\124\014\122\015\126\016" +
    "\125\017\136\020\135\021\127\022\133\023\114\024\123" +
    "\025\116\026\134\027\121\030\132\031\140\041\117\001" +
    "\002\000\012\004\uffdb\020\uffdb\021\uffdb\031\uffdb\001\002" +
    "\000\012\004\uffdd\020\uffdd\021\uffdd\031\uffdd\001\002\000" +
    "\012\004\uffe5\020\uffe5\021\uffe5\031\uffe5\001\002\000\012" +
    "\004\uffea\020\uffea\021\uffea\031\uffea\001\002\000\012\004" +
    "\uffe9\020\uffe9\021\uffe9\031\uffe9\001\002\000\012\004\uffed" +
    "\020\uffed\021\uffed\031\uffed\001\002\000\012\004\uffe7\020" +
    "\uffe7\021\uffe7\031\uffe7\001\002\000\012\004\uffeb\020\uffeb" +
    "\021\uffeb\031\uffeb\001\002\000\012\004\uffe4\020\uffe4\021" +
    "\uffe4\031\uffe4\001\002\000\012\004\uffe3\020\uffe3\021\uffe3" +
    "\031\uffe3\001\002\000\012\004\uffde\020\uffde\021\uffde\031" +
    "\uffde\001\002\000\012\004\uffe0\020\uffe0\021\uffe0\031\uffe0" +
    "\001\002\000\012\004\uffdf\020\uffdf\021\uffdf\031\uffdf\001" +
    "\002\000\012\004\uffe2\020\uffe2\021\uffe2\031\uffe2\001\002" +
    "\000\012\004\uffef\020\uffef\021\uffef\031\uffef\001\002\000" +
    "\012\004\uffe1\020\uffe1\021\uffe1\031\uffe1\001\002\000\012" +
    "\004\uffec\020\uffec\021\uffec\031\uffec\001\002\000\012\004" +
    "\uffdc\020\uffdc\021\uffdc\031\uffdc\001\002\000\012\004\uffee" +
    "\020\uffee\021\uffee\031\uffee\001\002\000\012\004\uffe6\020" +
    "\uffe6\021\uffe6\031\uffe6\001\002\000\012\004\uffe8\020\uffe8" +
    "\021\uffe8\031\uffe8\001\002\000\004\020\ufffa\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\007\004\013\005\011\006\005\001\001\000\012" +
    "\003\165\004\013\005\011\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\032" +
    "\004\013\005\011\006\005\001\001\000\002\001\001\000" +
    "\012\003\014\004\013\005\011\006\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\034\004" +
    "\013\005\011\006\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\045\001\001\000\002\001\001\000\004\011\111\001\001" +
    "\000\004\011\110\001\001\000\004\011\107\001\001\000" +
    "\002\001\001\000\004\011\105\001\001\000\004\011\104" +
    "\001\001\000\004\011\103\001\001\000\004\011\102\001" +
    "\001\000\004\011\101\001\001\000\004\011\100\001\001" +
    "\000\004\011\077\001\001\000\004\011\076\001\001\000" +
    "\004\011\075\001\001\000\004\011\074\001\001\000\004" +
    "\011\073\001\001\000\004\011\072\001\001\000\004\011" +
    "\071\001\001\000\004\011\070\001\001\000\004\011\067" +
    "\001\001\000\004\011\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\117\001\001\000\004\010\164\001\001\000\004\010\163" +
    "\001\001\000\004\010\162\001\001\000\004\010\161\001" +
    "\001\000\002\001\001\000\004\010\160\001\001\000\004" +
    "\010\157\001\001\000\004\010\156\001\001\000\004\010" +
    "\155\001\001\000\004\010\154\001\001\000\004\010\153" +
    "\001\001\000\004\010\152\001\001\000\004\010\151\001" +
    "\001\000\004\010\150\001\001\000\004\010\147\001\001" +
    "\000\004\010\146\001\001\000\004\010\145\001\001\000" +
    "\004\010\144\001\001\000\004\010\143\001\001\000\004" +
    "\010\142\001\001\000\004\010\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Clases, objetos, variables, lista, etc... en sintaxis java    
    //donde guardare cada uno de los resultados analizados
    public class Conjunto {
        public String titulo;
        public String rango;

        public Conjunto(String titulo, String rango){
            this.titulo = titulo;
            this.rango = rango;
        }
    }

    public class Expresion {
        public String titulo;
        public String exp;

        public Expresion(String titulo, String exp){
            this.titulo = titulo;
            this.exp = exp;
        }
    }
    public class Evaluar {
        public String titulo;
        public String eval;

        public Evaluar(String titulo, String eval){
            this.titulo = titulo;
            this.eval = eval;
        }
    } 
    public static String xs = "";
    public List<Conjunto> conj = new ArrayList<Conjunto>();
    public List<Expresion> expr = new ArrayList<Expresion>();
    public List<Evaluar> eval = new ArrayList<Evaluar>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= LLAVE_A BODY LLAVE_C 
            {
              Object RESULT =null;
		 System.out.println("Ya salio");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BODY ::= DEFCONJ BODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BODY ::= DEFCONJ 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY ::= DEFER BODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= DEFER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY ::= PORCEN PORCEN BODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BODY ::= TESTER BODY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY ::= TESTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DEFCONJ ::= CONJUNTO DOSPT TITULO GUION MAYORQ rango PTCOMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
        Conjunto c = new Conjunto(t,r);
        conj.add(c);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFCONJ",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // rango ::= RANGO_MAYUS 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("rango",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // rango ::= RANGO_MINUS 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("rango",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rango ::= SLETRAS 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("rango",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // rango ::= SNUMS 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("rango",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // rango ::= RANGO_NUM 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("rango",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // rango ::= RANGO_CHAR 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("rango",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rango ::= SCHAR 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("rango",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFER ::= TITULO GUION MAYORQ expresion 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
        Expresion x = new Expresion(t,xs);
        expr.add(x);
        xs = "";
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFER",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= CONCAT expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= OR expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= CERO_MAS expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= UNO_MAS expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= CERO_UNO expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= LLAVE_A expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= LLAVE_C expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= COMILLA_D expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= COMILLA_S expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= GUION expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= RANGO expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= MAYORQ expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= COMA expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= PAR_A expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= PAR_C expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= COR_A expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= COR_C expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= PORCEN expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= TITULO expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= CHAR expresion 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= PTCOMA 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TESTER ::= TITULO DOSPT COMILLA_D evaluar PTCOMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
        Evaluar x = new Evaluar(t,xs);
        eval.add(x);
        xs = "";
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TESTER",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // evaluar ::= CONCAT evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // evaluar ::= OR evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // evaluar ::= CERO_MAS evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // evaluar ::= UNO_MAS evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // evaluar ::= CERO_UNO evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // evaluar ::= LLAVE_A evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // evaluar ::= LLAVE_C evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // evaluar ::= COMILLA_S evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // evaluar ::= GUION evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // evaluar ::= RANGO evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // evaluar ::= MAYORQ evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // evaluar ::= COMA evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // evaluar ::= PAR_A evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // evaluar ::= PAR_C evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // evaluar ::= COR_A evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // evaluar ::= COR_C evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // evaluar ::= PORCEN evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // evaluar ::= TITULO evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // evaluar ::= CHAR evaluar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		xs = r + xs;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // evaluar ::= COMILLA_D 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("evaluar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
