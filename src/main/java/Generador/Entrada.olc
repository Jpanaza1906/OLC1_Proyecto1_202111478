{
<!
    Este es un comentario multilinea gigante siuuuu
    Si no da error, ya salio el proyecto hola hola
!>
CONJ: letra -> a~z; // declarando conjunto de letras desde a hasta z en minÃºsculas
CONJ: digito -> 0-3; // creamos el conjunto digitos solo para 0, 1, 2 y 3


//agregamos Expresiones regulares
identificador -> . {letra} * | "_" | {letra} {digito};
decimales -> . +{digito} . "." + {digito};


%%

identificador: "hola_soy_id_1"; //correcto
identificador: "HoLA"; //incorrecto
decimales : "301.59"; //incorrecto
decimales : "1200.31"; //correcto
}
DEFER ::= TITULO:t GUION MAYORQ expresion:e PTCOMA
    {:
        System.out.println(t);
        System.out.println(e);
        Expresion x = new Expresion(t,e);
        expr.add(x);
    :}
;
expresion ::=
         CONCAT LLAVE_A var:t1 LLAVE_C LLAVE_A var:t2 LLAVE_C {: System.out.println("CONCAT("+t1+","+t2+")");:}
        | OR LLAVE_A var:t1 LLAVE_C LLAVE_A var:t2 LLAVE_C    {: System.out.println("OR("+t1+","+t2+")");:}
        | CERO_MAS LLAVE_A var:t1 LLAVE_C                     {: System.out.println("*("+t1+")");:}
        | UNO_MAS LLAVE_A var:t1 LLAVE_C                      {: System.out.println("+("+t1+")");:}
        | CERO_UNO LLAVE_A var:t1 LLAVE_C                     {: System.out.println("?("+t1+")");:}
        | CONCAT expresion
        | OR expresion
        | CERO_MAS expresion
        | UNO_MAS expresion
        | CERO_UNO expresion

;

TESTER ::= TITULO:t DOSPT COMILLA_D eval COMILLA_D PTCOMA

BODY ::=  DEFCONJ BODY
        | DEFCONJ
        | DEFER BODY
        | DEFER 
        | PORCEN PORCEN BODY
        | TESTER BODY
        | TESTER
;